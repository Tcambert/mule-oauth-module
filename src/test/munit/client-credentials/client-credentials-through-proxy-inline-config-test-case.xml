<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:oauth="http://www.mulesoft.org/schema/mule/oauth"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:munit="http://www.mulesoft.org/schema/mule/munit"
      xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
      xsi:schemaLocation="
       http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
       http://www.mulesoft.org/schema/mule/munit-tools http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd
       http://www.mulesoft.org/schema/mule/oauth http://www.mulesoft.org/schema/mule/oauth/current/mule-oauth.xsd
       http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd">

    <munit:config name="client-credential-through-inline-config" minMuleVersion="4.3.0"/>

    <munit:dynamic-port propertyName="oauth.server.port"/>

    <oauth:token-manager-config name="tokenManagerConfig"/>

    <http:request-config name="requestConfigWithOAuth1">
        <http:request-connection host="localhost" port="${oauth.server.port}">
            <http:authentication>
                <oauth:client-credentials-grant-type
                        clientId="${client.id}"
                        clientSecret="${client.secret}"
                        tokenManager="tokenManagerConfig"
                        scopes="${scopes}"
                        tokenUrl="${token.url}"
                        refreshTokenWhen="#[attributes.statusCode == 500]"
                        responseAccessToken="#[payload['access_token']]"
                        responseExpiresIn="#[payload['expires_in']]">
                    <oauth:proxy-config>
                        <http:proxy name="proxyConfig" host="localhost" port="${proxyPort}" />
                    </oauth:proxy-config>
                </oauth:client-credentials-grant-type>
            </http:authentication>
        </http:request-connection>
    </http:request-config>

    <munit:test name="mockAuthorizationRequest" description="Validates that the authorization request can be mocked">
        <munit:execution>

            <set-payload value="#[{method : 'POST', headers: {Authorization: 'Basic YWRtaW46YWRtaW4='}, listenerPath: '/', relativePath: '/', version: 'HTTP/1.1', scheme: 'http', requestPath: '/', requestUri: 'localhost:8080/', localAddress: '127.0.0.1', remoteAddress: '127.0.0.1' } as Object { class : 'org.mule.extension.http.api.HttpRequestAttributes'}]"/>
        </munit:execution>
        <munit:validation>
            <munit-tools:assert-that expression="#[payload.headers['Authorization']]" is="#[MunitTools::equalTo('Basic YWRtaW46YWRtaW4=')]"/>
        </munit:validation>
    </munit:test>





</mule>